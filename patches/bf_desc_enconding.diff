diff --git a/lib/bes/files/attr/bf_attr_desc.py b/lib/bes/files/attr/bf_attr_desc.py
index 376db284..371bb545 100644
--- a/lib/bes/files/attr/bf_attr_desc.py
+++ b/lib/bes/files/attr/bf_attr_desc.py
@@ -21,13 +21,13 @@ class bf_attr_desc(namedtuple('bf_attr_desc', 'key, name, type_desc, old_keys'))
   def _check_cast_func(clazz, obj):
     return tuple_util.cast_seq_to_namedtuple(clazz, obj)
   
-  def decode(self, value):
-    return self.type_desc.decode(value)
+  def decode(self, value, allow_none = False):
+    return self.type_desc.decode(value, allow_none)
 
-  def encode(self, value):
-    return self.type_desc.encode(value)
+  def encode(self, value, allow_none = False):
+    return self.type_desc.encode(value, allow_none)
 
-  def check(self, value):
-    return self.type_desc.check(value)
+  def check(self, value, allow_none = False):
+    return self.type_desc.check(value, allow_none)
   
 check.register_class(bf_attr_desc, include_seq = False, cast_func = bf_attr_desc._check_cast_func)
diff --git a/lib/bes/files/attr/bf_attr_encoding.py b/lib/bes/files/attr/bf_attr_encoding.py
index a7edfca8..c3997a8d 100644
--- a/lib/bes/files/attr/bf_attr_encoding.py
+++ b/lib/bes/files/attr/bf_attr_encoding.py
@@ -13,42 +13,42 @@ from bes.system.check import check
 class bf_attr_encoding(object):
 
   @classmethod
-  def decode_int(clazz, value):
+  def decode_int(clazz, value, allow_none = False):
     'Decode an int'
     check.check_bytes(value)
     
     return number_util.to_int(value.decode('utf-8'))
 
   @classmethod
-  def encode_int(clazz, value):
+  def encode_int(clazz, value, allow_none = False):
     'Decode an int'
     check.check_int(value)
 
     return str(value).encode('utf-8')
   
   @classmethod
-  def decode_float(clazz, value):
+  def decode_float(clazz, value, allow_none = False):
     'Decode an int'
     check.check_bytes(value)
     
     return number_util.to_float(value.decode('utf-8'))
 
   @classmethod
-  def encode_float(clazz, value):
+  def encode_float(clazz, value, allow_none = False):
     'Decode an float'
     check.check_number(value)
 
     return str(value).encode('utf-8')
   
   @classmethod
-  def decode_string(clazz, value):
+  def decode_string(clazz, value, allow_none = False):
     'Decode a string'
     check.check_bytes(value)
     
     return value.decode('utf-8')
 
   @classmethod
-  def encode_string(clazz, value):
+  def encode_string(clazz, value, allow_none = False):
     'Decode an string'
     check.check_string(value)
 
@@ -76,7 +76,7 @@ class bf_attr_encoding(object):
     return str(value).encode('utf-8')
 
   @classmethod
-  def decode_datetime(clazz, value):
+  def decode_datetime(clazz, value, allow_none = False):
     'Decode a date'
     check.check_bytes(value)
 
@@ -85,14 +85,14 @@ class bf_attr_encoding(object):
     return datetime.fromtimestamp(timestamp)
     
   @classmethod
-  def encode_datetime(clazz, value):
+  def encode_datetime(clazz, value, allow_none = False):
     'Decode an date'
     check.check_datetime(value)
 
     return clazz.encode_string(str(value.timestamp()))
 
   @classmethod
-  def decode_json(clazz, value):
+  def decode_json(clazz, value, allow_none = False):
     'Decode bytes as json'
     check.check_bytes(value)
 
@@ -100,7 +100,7 @@ class bf_attr_encoding(object):
     return json.loads(string_value)
     
   @classmethod
-  def encode_json(clazz, value):
+  def encode_json(clazz, value, allow_none = False):
     'Encode a dict as json'
     check.check_dict(value)
 
diff --git a/lib/bes/files/attr/bf_attr_type_desc_base.py b/lib/bes/files/attr/bf_attr_type_desc_base.py
index e5131b24..1f691fca 100644
--- a/lib/bes/files/attr/bf_attr_type_desc_base.py
+++ b/lib/bes/files/attr/bf_attr_type_desc_base.py
@@ -18,10 +18,10 @@ class _bf_attr_type_desc_meta(ABCMeta):
 
 class bf_attr_type_desc_base(with_metaclass(_bf_attr_type_desc_meta)):
 
-  @cached_class_property
-  def encoding(clazz):
-    from .bf_attr_encoding import bf_attr_encoding
-    return bf_attr_encoding
+#  @cached_class_property
+#  def encoding(clazz):
+#    from .bf_attr_encoding import bf_attr_encoding
+#    return bf_attr_encoding
   
   @classmethod
   @abstractmethod
@@ -31,38 +31,20 @@ class bf_attr_type_desc_base(with_metaclass(_bf_attr_type_desc_meta)):
 
   @classmethod
   @abstractmethod
-  def encoder(clazz):
-    'Return encoder function for this type'
+  def encode(clazz, value, allow_none):
+    'Encode value into bytes'
     raise NotImplemented('encoder')
 
   @classmethod
   @abstractmethod
-  def decoder(clazz):
+  def decode(clazz, value_bytes, allow_none):
     'Return decoder function for this type'
     raise NotImplemented('decoder')
 
   @classmethod
   @abstractmethod
-  def checker(clazz):
-    'Return checker function for this type'
+  def check(clazz, value, allow_none):
+    'Check type of value'
     raise NotImplemented('checker')
   
-  @classmethod
-  @abstractmethod
-  def description(clazz):
-    'Return a description for this type.'
-    raise NotImplemented('description')
-
-  @classmethod
-  def decode(clazz, value):
-    return clazz.decoder()(value)
-
-  @classmethod
-  def encode(clazz, value):
-    return clazz.encoder()(value)
-
-  @classmethod
-  def check(clazz, value):
-    return clazz.checker()(value)
-  
 check.register_class(bf_attr_type_desc_base, name = 'bf_attr_type_desc', include_seq = False)
diff --git a/lib/bes/files/attr/bf_attr_type_desc_bool.py b/lib/bes/files/attr/bf_attr_type_desc_bool.py
index 8b1c4cae..953d5a7a 100644
--- a/lib/bes/files/attr/bf_attr_type_desc_bool.py
+++ b/lib/bes/files/attr/bf_attr_type_desc_bool.py
@@ -15,24 +15,18 @@ class bf_attr_type_desc_bool(bf_attr_type_desc_base):
 
   @classmethod
   #@abstractmethod
-  def encoder(clazz):
+  def encode(clazz, value, allow_none):
     'Return encoder function for this type'
-    return bf_attr_encoding.encode_bool
+    return bf_attr_encoding.encode_bool(value, allow_none = allow_none)
 
   @classmethod
   #@abstractmethod
-  def decoder(clazz):
+  def decode(clazz, value_bytes, allow_none):
     'Return decoder function for this type'
-    return bf_attr_encoding.decode_bool
+    return bf_attr_encoding.decode_bool(value_bytes, allow_none = allow_none)
 
   @classmethod
   #@abstractmethod
-  def checker(clazz):
+  def check(clazz, value, allow_none):
     'Return checker function for this type'
-    return check.check_bool
-  
-  @classmethod
-  #@abstractmethod
-  def description(clazz):
-    'Return a description for this type.'
-    return 'bool'
+    return check.check_bool(value, allow_none = allow_none)
diff --git a/lib/bes/files/attr/bf_attr_type_desc_datetime.py b/lib/bes/files/attr/bf_attr_type_desc_datetime.py
index ea75fd4f..3f5243b5 100644
--- a/lib/bes/files/attr/bf_attr_type_desc_datetime.py
+++ b/lib/bes/files/attr/bf_attr_type_desc_datetime.py
@@ -15,24 +15,18 @@ class bf_attr_type_desc_datetime(bf_attr_type_desc_base):
 
   @classmethod
   #@abstractmethod
-  def encoder(clazz):
+  def encode(clazz, value, allow_none):
     'Return encoder function for this type'
-    return bf_attr_encoding.encode_datetime
+    return bf_attr_encoding.encode_datetime(value, allow_none = allow_none)
 
   @classmethod
   #@abstractmethod
-  def decoder(clazz):
+  def decode(clazz, value_bytes, allow_none):
     'Return decoder function for this type'
-    return bf_attr_encoding.decode_datetime
+    return bf_attr_encoding.decode_datetime(value_bytes, allow_none = allow_none)
 
   @classmethod
   #@abstractmethod
-  def checker(clazz):
+  def check(clazz, value, allow_none):
     'Return checker function for this type'
-    return check.check_datetime
-  
-  @classmethod
-  #@abstractmethod
-  def description(clazz):
-    'Return a description for this type.'
-    return 'datetime'
+    return check.check_datetime(value, allow_none = allow_none)
diff --git a/lib/bes/files/attr/bf_attr_type_desc_float.py b/lib/bes/files/attr/bf_attr_type_desc_float.py
index d621b3cb..daa128d4 100644
--- a/lib/bes/files/attr/bf_attr_type_desc_float.py
+++ b/lib/bes/files/attr/bf_attr_type_desc_float.py
@@ -15,24 +15,18 @@ class bf_attr_type_desc_float(bf_attr_type_desc_base):
 
   @classmethod
   #@abstractmethod
-  def encoder(clazz):
+  def encode(clazz, value, allow_none):
     'Return encoder function for this type'
-    return bf_attr_encoding.encode_float
+    return bf_attr_encoding.encode_float(value, allow_none = allow_none)
 
   @classmethod
   #@abstractmethod
-  def decoder(clazz):
+  def decode(clazz, value_bytes, allow_none):
     'Return decoder function for this type'
-    return bf_attr_encoding.decode_float
+    return bf_attr_encoding.decode_float(value_bytes, allow_none = allow_none)
 
   @classmethod
   #@abstractmethod
-  def checker(clazz):
+  def check(clazz, value, allow_none):
     'Return checker function for this type'
-    return check.check_float
-  
-  @classmethod
-  #@abstractmethod
-  def description(clazz):
-    'Return a description for this type.'
-    return 'float'
+    return check.check_float(value, allow_none = allow_none)
diff --git a/lib/bes/files/attr/bf_attr_type_desc_int.py b/lib/bes/files/attr/bf_attr_type_desc_int.py
index 3208d2b2..57d0df36 100644
--- a/lib/bes/files/attr/bf_attr_type_desc_int.py
+++ b/lib/bes/files/attr/bf_attr_type_desc_int.py
@@ -15,24 +15,18 @@ class bf_attr_type_desc_int(bf_attr_type_desc_base):
 
   @classmethod
   #@abstractmethod
-  def encoder(clazz):
+  def encode(clazz, value, allow_none):
     'Return encoder function for this type'
-    return bf_attr_encoding.encode_int
+    return bf_attr_encoding.encode_int(value, allow_none = allow_none)
 
   @classmethod
   #@abstractmethod
-  def decoder(clazz):
+  def decode(clazz, value_bytes, allow_none):
     'Return decoder function for this type'
-    return bf_attr_encoding.decode_int
+    return bf_attr_encoding.decode_int(value_bytes, allow_none = allow_none)
 
   @classmethod
   #@abstractmethod
-  def checker(clazz):
+  def check(clazz, value, allow_none):
     'Return checker function for this type'
-    return check.check_int
-  
-  @classmethod
-  #@abstractmethod
-  def description(clazz):
-    'Return a description for this type.'
-    return 'int'
+    return check.check_int(value, allow_none = allow_none)
diff --git a/lib/bes/files/attr/bf_attr_type_desc_string.py b/lib/bes/files/attr/bf_attr_type_desc_string.py
index 4e53a01b..c4295058 100644
--- a/lib/bes/files/attr/bf_attr_type_desc_string.py
+++ b/lib/bes/files/attr/bf_attr_type_desc_string.py
@@ -15,24 +15,18 @@ class bf_attr_type_desc_string(bf_attr_type_desc_base):
 
   @classmethod
   #@abstractmethod
-  def encoder(clazz):
+  def encode(clazz, value, allow_none):
     'Return encoder function for this type'
-    return bf_attr_encoding.encode_string
+    return bf_attr_encoding.encode_string(value, allow_none = allow_none)
 
   @classmethod
   #@abstractmethod
-  def decoder(clazz):
+  def decode(clazz, value_bytes, allow_none):
     'Return decoder function for this type'
-    return bf_attr_encoding.decode_string
+    return bf_attr_encoding.decode_string(value_bytes, allow_none = allow_none)
 
   @classmethod
   #@abstractmethod
-  def checker(clazz):
+  def check(clazz, value, allow_none):
     'Return checker function for this type'
-    return check.check_string
-  
-  @classmethod
-  #@abstractmethod
-  def description(clazz):
-    'Return a description for this type.'
-    return 'string'
+    return check.check_string(value, allow_none = allow_none)
